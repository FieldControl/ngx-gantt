import { TemplateRef, QueryList, OnInit, EventEmitter, OnDestroy, ChangeDetectorRef, AfterViewInit } from '@angular/core';
import { GanttItemInternal, GanttGroupInternal, GanttSelectedEvent, GanttTableDragEnterPredicateContext, GanttTableDragDroppedEvent, GanttTableDragStartedEvent, GanttTableDragEndedEvent } from '../../../class';
import { NgxGanttTableColumnComponent } from '../../../table/gantt-column.component';
import { GanttAbstractComponent } from '../../../gantt-abstract';
import { GanttUpper } from '../../../gantt-upper';
import { CdkDrag, CdkDragDrop, CdkDragEnd, CdkDragMove, CdkDragStart } from '@angular/cdk/drag-drop';
import * as i0 from "@angular/core";
export declare class GanttTableBodyComponent implements OnInit, OnDestroy, AfterViewInit {
    gantt: GanttAbstractComponent;
    ganttUpper: GanttUpper;
    private cdr;
    private document;
    private _viewportItems;
    set viewportItems(data: (GanttGroupInternal | GanttItemInternal)[]);
    get viewportItems(): (GanttGroupInternal | GanttItemInternal)[];
    flatItems: (GanttGroupInternal | GanttItemInternal)[];
    columns: QueryList<NgxGanttTableColumnComponent>;
    groupTemplate: TemplateRef<any>;
    emptyTemplate: TemplateRef<any>;
    rowBeforeTemplate: TemplateRef<any>;
    rowAfterTemplate: TemplateRef<any>;
    draggable: boolean;
    dropEnterPredicate?: (context: GanttTableDragEnterPredicateContext) => boolean;
    dragDropped: EventEmitter<GanttTableDragDroppedEvent<unknown>>;
    dragStarted: EventEmitter<GanttTableDragStartedEvent<unknown>>;
    dragEnded: EventEmitter<GanttTableDragEndedEvent<unknown>>;
    itemClick: EventEmitter<GanttSelectedEvent<unknown>>;
    ganttTableClass: boolean;
    ganttTableEmptyClass: boolean;
    ganttTableDragging: boolean;
    cdkDrags: QueryList<CdkDrag<GanttItemInternal>>;
    hasGroup: boolean;
    hasExpandIcon: boolean;
    private itemDragsMap;
    private itemDragMoved;
    private itemDropTarget;
    private destroy$;
    constructor(gantt: GanttAbstractComponent, ganttUpper: GanttUpper, cdr: ChangeDetectorRef, document: Document);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    expandGroup(group: GanttGroupInternal): void;
    expandChildren(event: MouseEvent, item: GanttItemInternal): void;
    onItemDragStarted(event: CdkDragStart<GanttItemInternal>): void;
    emitItemDragMoved(event: CdkDragMove): void;
    onItemDragMoved(event: CdkDragMove<GanttItemInternal>): void;
    onItemDragEnded(event: CdkDragEnd<GanttItemInternal>): void;
    onListDropped(event: CdkDragDrop<GanttItemInternal[], GanttItemInternal[], GanttItemInternal>): void;
    trackBy(index: number, item: GanttGroupInternal | GanttItemInternal): string | number;
    ngOnDestroy(): void;
    private removeItem;
    private insertItem;
    private insertChildrenItem;
    private getParentByItem;
    private getExpandChildrenByDrag;
    private getChildrenElementsByElement;
    private getTargetPosition;
    private showDropPositionPlaceholder;
    private cleanupDragArtifacts;
    static ɵfac: i0.ɵɵFactoryDeclaration<GanttTableBodyComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GanttTableBodyComponent, "gantt-table-body", never, { "viewportItems": { "alias": "viewportItems"; "required": false; }; "flatItems": { "alias": "flatItems"; "required": false; }; "columns": { "alias": "columns"; "required": false; }; "groupTemplate": { "alias": "groupTemplate"; "required": false; }; "emptyTemplate": { "alias": "emptyTemplate"; "required": false; }; "rowBeforeTemplate": { "alias": "rowBeforeTemplate"; "required": false; }; "rowAfterTemplate": { "alias": "rowAfterTemplate"; "required": false; }; "draggable": { "alias": "draggable"; "required": false; }; "dropEnterPredicate": { "alias": "dropEnterPredicate"; "required": false; }; }, { "dragDropped": "dragDropped"; "dragStarted": "dragStarted"; "dragEnded": "dragEnded"; "itemClick": "itemClick"; }, never, never, true, never>;
}
