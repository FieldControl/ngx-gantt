import { CdkVirtualScrollViewport, ViewportRuler } from '@angular/cdk/scrolling';
import { AfterViewChecked, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnInit, QueryList, SimpleChanges, TemplateRef } from '@angular/core';
import { Observable } from 'rxjs';
import { GanttGroupInternal, GanttItem, GanttItemInternal, GanttLineClickEvent, GanttLinkDragEvent, GanttSelectedEvent, GanttTableDragEndedEvent, GanttTableDragStartedEvent, GanttVirtualScrolledIndexChangeEvent } from './class';
import { GanttUpper } from './gantt-upper';
import { GanttGlobalConfig } from './gantt.config';
import { NgxGanttRootComponent } from './root.component';
import { NgxGanttTableColumnComponent } from './table/gantt-column.component';
import { NgxGanttTableComponent } from './table/gantt-table.component';
import { GanttDate } from './utils/date';
import * as i0 from "@angular/core";
export declare class NgxGanttComponent extends GanttUpper implements OnInit, OnChanges, AfterViewInit, AfterViewChecked {
    private viewportRuler;
    maxLevel: number;
    async: boolean;
    childrenResolve: (GanttItem: any) => Observable<GanttItem[]>;
    linkable: boolean;
    set loading(loading: boolean);
    virtualScrollEnabled: boolean;
    loadingDelay: number;
    linkDragStarted: EventEmitter<GanttLinkDragEvent<unknown>>;
    linkDragEnded: EventEmitter<GanttLinkDragEvent<unknown>>;
    lineClick: EventEmitter<GanttLineClickEvent<unknown>>;
    selectedChange: EventEmitter<GanttSelectedEvent<unknown>>;
    virtualScrolledIndexChange: EventEmitter<GanttVirtualScrolledIndexChangeEvent>;
    table: NgxGanttTableComponent;
    columns: QueryList<NgxGanttTableColumnComponent>;
    tableEmptyTemplate: TemplateRef<any>;
    ganttRoot: NgxGanttRootComponent;
    footerTemplate: TemplateRef<any>;
    virtualScroll: CdkVirtualScrollViewport;
    get loading(): boolean;
    flatItems: (GanttGroupInternal | GanttItemInternal)[];
    viewportItems: (GanttGroupInternal | GanttItemInternal)[];
    private _loading;
    private loadingTimer;
    private rangeStart;
    private rangeEnd;
    private flatItemsMap;
    private draggingItem;
    constructor(elementRef: ElementRef<HTMLElement>, cdr: ChangeDetectorRef, ngZone: NgZone, viewportRuler: ViewportRuler, config: GanttGlobalConfig);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    private buildFlatItems;
    private afterExpand;
    private computeTempDataRefs;
    private appendDraggingItemToViewportItems;
    expandChildren(item: GanttItemInternal): void;
    selectItem(selectEvent: GanttSelectedEvent): void;
    scrollToToday(): void;
    scrollToDate(date: number | Date | GanttDate): void;
    scrolledIndexChange(index: number): void;
    expandGroups(expanded: boolean): void;
    expandGroup(group: GanttGroupInternal): void;
    itemDragStarted(event: GanttTableDragStartedEvent): void;
    itemDragEnded(event: GanttTableDragEndedEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxGanttComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgxGanttComponent, "ngx-gantt", never, { "maxLevel": { "alias": "maxLevel"; "required": false; }; "async": { "alias": "async"; "required": false; }; "childrenResolve": { "alias": "childrenResolve"; "required": false; }; "linkable": { "alias": "linkable"; "required": false; }; "loading": { "alias": "loading"; "required": false; }; "virtualScrollEnabled": { "alias": "virtualScrollEnabled"; "required": false; }; "loadingDelay": { "alias": "loadingDelay"; "required": false; }; }, { "linkDragStarted": "linkDragStarted"; "linkDragEnded": "linkDragEnded"; "lineClick": "lineClick"; "selectedChange": "selectedChange"; "virtualScrolledIndexChange": "virtualScrolledIndexChange"; }, ["table", "tableEmptyTemplate", "footerTemplate", "columns"], never, true, never>;
}
