import { GanttDate } from '../utils/date';
import { BehaviorSubject } from 'rxjs';
import { GanttLinkType } from './link';
const DEFAULT_FILL_INCREMENT_WIDTH = 120;
export var GanttItemType;
(function (GanttItemType) {
    GanttItemType["bar"] = "bar";
    GanttItemType["range"] = "range";
    GanttItemType["custom"] = "custom";
})(GanttItemType || (GanttItemType = {}));
export class GanttItemInternal {
    get refs() {
        return this.refs$.getValue();
    }
    constructor(item, level, view) {
        this.view = view;
        this.refs$ = new BehaviorSubject(null);
        this.origin = item;
        this.id = this.origin.id;
        this.links = (this.origin.links || []).map((link) => {
            if (typeof link === 'string') {
                return {
                    type: GanttLinkType.fs,
                    link
                };
            }
            else {
                return link;
            }
        });
        this.color = this.origin.color;
        this.barStyle = this.origin.barStyle;
        this.linkable = this.origin.linkable === undefined ? true : this.origin.linkable;
        this.draggable = this.origin.draggable === undefined ? true : this.origin.draggable;
        this.itemDraggable = this.origin.itemDraggable;
        this.expandable = this.origin.expandable || (this.origin.children || []).length > 0;
        this.expanded = this.origin.expanded === undefined ? false : this.origin.expanded;
        this.start = item.start ? new GanttDate(item.start) : null;
        this.end = item.end ? new GanttDate(item.end) : null;
        this.level = level;
        this.children = (item.children || []).map((subItem) => {
            return new GanttItemInternal(subItem, level + 1, view);
        });
        this.type = this.origin.type || GanttItemType.bar;
        this.progress = this.origin.progress;
        this.fillDateWhenStartOrEndIsNil(item);
    }
    fillDateWhenStartOrEndIsNil(item) {
        if (this.view) {
            if (item.start && !item.end) {
                this.end = this.view.getDateByXPoint(this.view.getXPointByDate(new GanttDate(item.start)) + DEFAULT_FILL_INCREMENT_WIDTH);
            }
            if (!item.start && item.end) {
                this.start = this.view.getDateByXPoint(this.view.getXPointByDate(new GanttDate(item.end)) - DEFAULT_FILL_INCREMENT_WIDTH);
            }
        }
    }
    updateRefs(refs) {
        this.refs$.next(refs);
    }
    updateDate(start, end) {
        this.start = start;
        this.end = end;
        this.origin.start = this.start.getUnixTime();
        this.origin.end = this.end.getUnixTime();
    }
    updateLevel(level) {
        this.level = level;
    }
    addChildren(items) {
        this.origin.children = items;
        this.children = (items || []).map((subItem) => {
            return new GanttItemInternal(subItem, this.level + 1, this.view);
        });
    }
    setExpand(expanded) {
        this.expanded = expanded;
        this.origin.expanded = expanded;
    }
    addLink(link) {
        this.links = [...this.links, link];
        this.origin.links = this.links;
    }
}
//# sourceMappingURL=data:application/json;base64,