import { inject, Inject, InjectionToken } from '@angular/core';
import { GanttLinkLineType, GanttLinkType } from './class/link';
import { Injectable } from '@angular/core';
import { GANTT_I18N_LOCALE_TOKEN, GanttI18nLocale } from './i18n/i18n';
import zhHans from './i18n/locales/zh-hans';
import zhHant from './i18n/locales/zh-hant';
import { setDefaultTimeZone } from './utils/date';
import * as i0 from "@angular/core";
export const defaultConfig = {
    locale: GanttI18nLocale.zhHans,
    linkOptions: {
        dependencyTypes: [GanttLinkType.fs],
        showArrow: false,
        lineType: GanttLinkLineType.curve
    },
    styleOptions: {
        headerHeight: 44,
        lineHeight: 44,
        barHeight: 22
    },
    dateOptions: {
        weekStartsOn: 1
    }
};
export const GANTT_GLOBAL_CONFIG = new InjectionToken('GANTT_GLOBAL_CONFIG');
export class GanttConfigService {
    constructor(globalConfig) {
        const localeId = globalConfig.locale || defaultConfig.locale;
        this.config = {
            locale: localeId,
            dateFormat: Object.assign({}, defaultConfig.dateFormat, globalConfig.dateFormat),
            styleOptions: Object.assign({}, defaultConfig.styleOptions, globalConfig.styleOptions),
            linkOptions: Object.assign({}, defaultConfig.linkOptions, globalConfig.linkOptions),
            dateOptions: Object.assign({}, defaultConfig.dateOptions, globalConfig.dateOptions)
        };
        this.i18nLocales = inject(GANTT_I18N_LOCALE_TOKEN).reduce((result, localeConfig) => {
            result[localeConfig.id] = localeConfig; // 这里使用 `id` 作为 key
            return result;
        }, {
            ['zh-cn']: zhHans,
            ['zh-tw']: zhHant
        });
        if (this.config.dateOptions?.timeZone) {
            setDefaultTimeZone(this.config.dateOptions.timeZone);
        }
    }
    setLocale(locale) {
        this.config.locale = locale;
    }
    getLocaleConfig() {
        return this.i18nLocales[this.config.locale] ?? this.i18nLocales[this.config.locale.toLowerCase()] ?? zhHans;
    }
    getViewsLocale() {
        return this.getLocaleConfig().views;
    }
    getDateLocale() {
        return this.config.dateOptions?.locale ?? this.getLocaleConfig().dateLocale;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: GanttConfigService, deps: [{ token: GANTT_GLOBAL_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: GanttConfigService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: GanttConfigService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [GANTT_GLOBAL_CONFIG]
                }] }] });
//# sourceMappingURL=data:application/json;base64,