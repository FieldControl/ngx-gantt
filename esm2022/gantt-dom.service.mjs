import { isPlatformServer } from '@angular/common';
import { Injectable, Inject, PLATFORM_ID, signal } from '@angular/core';
import { fromEvent, Subject, merge, EMPTY, Observable } from 'rxjs';
import { pairwise, map, auditTime, takeUntil } from 'rxjs/operators';
import { isNumber } from './utils/helpers';
import { passiveListenerOptions } from './utils/passive-listeners';
import * as i0 from "@angular/core";
const scrollThreshold = 50;
export var ScrollDirection;
(function (ScrollDirection) {
    ScrollDirection[ScrollDirection["NONE"] = 0] = "NONE";
    ScrollDirection[ScrollDirection["LEFT"] = 1] = "LEFT";
    ScrollDirection[ScrollDirection["RIGHT"] = 2] = "RIGHT";
})(ScrollDirection || (ScrollDirection = {}));
export class GanttDomService {
    constructor(ngZone, platformId) {
        this.ngZone = ngZone;
        this.platformId = platformId;
        this.visibleRangeX = signal({ min: 0, max: 0 });
        this.unsubscribe$ = new Subject();
    }
    monitorScrollChange() {
        const scrollObservers = [
            fromEvent(this.mainContainer, 'scroll', passiveListenerOptions),
            fromEvent(this.sideContainer, 'scroll', passiveListenerOptions)
        ];
        this.mainFooter && scrollObservers.push(fromEvent(this.mainFooter, 'scroll', passiveListenerOptions));
        this.mainScrollbar && scrollObservers.push(fromEvent(this.mainScrollbar, 'scroll', passiveListenerOptions));
        this.ngZone.runOutsideAngular(() => merge(...scrollObservers)
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe((event) => {
            this.syncScroll(event);
        }));
    }
    syncScroll(event) {
        const target = event.currentTarget;
        const classList = target.classList;
        if (!classList.contains('gantt-side-container')) {
            this.mainContainer.scrollLeft = target.scrollLeft;
            this.calendarHeader.scrollLeft = target.scrollLeft;
            this.calendarOverlay.scrollLeft = target.scrollLeft;
            this.mainScrollbar && (this.mainScrollbar.scrollLeft = target.scrollLeft);
            this.mainFooter && (this.mainFooter.scrollLeft = target.scrollLeft);
            if (classList.contains('gantt-main-container')) {
                this.sideContainer.scrollTop = target.scrollTop;
                this.mainContainer.scrollTop = target.scrollTop;
            }
        }
        else {
            this.sideContainer.scrollTop = target.scrollTop;
            this.mainContainer.scrollTop = target.scrollTop;
        }
    }
    disableBrowserWheelEvent() {
        const container = this.mainContainer;
        this.ngZone.runOutsideAngular(() => fromEvent(container, 'wheel')
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe((event) => {
            const delta = event.deltaX;
            if (!delta) {
                return;
            }
            if ((container.scrollLeft + container.offsetWidth === container.scrollWidth && delta > 0) ||
                (container.scrollLeft === 0 && delta < 0)) {
                event.preventDefault();
            }
        }));
    }
    initialize(root) {
        this.root = root.nativeElement;
        this.side = this.root.getElementsByClassName('gantt-side')[0];
        this.container = this.root.getElementsByClassName('gantt-container')[0];
        this.sideContainer = this.root.getElementsByClassName('gantt-side-container')[0];
        this.mainContainer = this.root.getElementsByClassName('gantt-main-container')[0];
        this.mainScrollbar = this.root.getElementsByClassName('gantt-main-scrollbar')[0];
        this.mainFooter = this.root.getElementsByClassName('gantt-container-footer')[0];
        this.verticalScrollContainer = this.root.getElementsByClassName('gantt-scroll-container')[0];
        const mainItems = this.mainContainer.getElementsByClassName('gantt-main-items')[0];
        const mainGroups = this.mainContainer.getElementsByClassName('gantt-main-groups')[0];
        this.mainItems = mainItems || mainGroups;
        this.calendarHeader = this.root.getElementsByClassName('gantt-calendar-header')[0];
        this.calendarOverlay = this.root.getElementsByClassName('gantt-calendar-grid')[0];
        this.monitorScrollChange();
        this.disableBrowserWheelEvent();
    }
    /**
     * @returns An observable that will emit outside the Angular zone. Note, consumers should re-enter the Angular zone
     * to run the change detection if needed.
     */
    getViewerScroll(options) {
        const scrollObservers = [fromEvent(this.mainContainer, 'scroll', options)];
        this.mainFooter && scrollObservers.push(fromEvent(this.mainFooter, 'scroll', options));
        this.mainScrollbar && scrollObservers.push(fromEvent(this.mainScrollbar, 'scroll', options));
        return new Observable((subscriber) => this.ngZone.runOutsideAngular(() => merge(...scrollObservers)
            .pipe(map(() => this.mainContainer.scrollLeft), pairwise(), map(([previous, current]) => {
            this.setVisibleRangeX();
            const event = {
                target: this.mainContainer,
                direction: ScrollDirection.NONE
            };
            if (current - previous < 0) {
                if (this.mainContainer.scrollLeft < scrollThreshold && this.mainContainer.scrollLeft > 0) {
                    event.direction = ScrollDirection.LEFT;
                }
            }
            if (current - previous > 0) {
                if (this.mainContainer.scrollWidth - this.mainContainer.clientWidth - this.mainContainer.scrollLeft <
                    scrollThreshold) {
                    event.direction = ScrollDirection.RIGHT;
                }
            }
            return event;
        }))
            .subscribe(subscriber)));
    }
    getResize() {
        return isPlatformServer(this.platformId) ? EMPTY : fromEvent(window, 'resize').pipe(auditTime(150));
    }
    getResizeByElement(element) {
        return new Observable((observer) => {
            const resizeObserver = new ResizeObserver(() => {
                observer.next();
            });
            resizeObserver.observe(element);
        });
    }
    scrollMainContainer(left) {
        if (isNumber(left)) {
            const scrollLeft = left - this.mainContainer.clientWidth / 2;
            this.mainContainer.scrollLeft = scrollLeft > scrollThreshold ? scrollLeft : 0;
            this.calendarHeader.scrollLeft = this.mainContainer.scrollLeft;
            this.calendarOverlay.scrollLeft = this.mainContainer.scrollLeft;
            this.mainScrollbar && (this.mainScrollbar.scrollLeft = this.mainContainer.scrollLeft);
            this.mainFooter && (this.mainFooter.scrollLeft = this.mainContainer.scrollLeft);
        }
    }
    setVisibleRangeX() {
        this.visibleRangeX.set({
            min: this.mainContainer.scrollLeft,
            max: this.mainContainer.scrollLeft + this.mainContainer.clientWidth
        });
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: GanttDomService, deps: [{ token: i0.NgZone }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: GanttDomService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: GanttDomService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }] });
//# sourceMappingURL=data:application/json;base64,