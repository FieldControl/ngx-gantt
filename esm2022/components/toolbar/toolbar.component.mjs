import { Component, HostBinding, Input, Inject, inject } from '@angular/core';
import { GANTT_UPPER_TOKEN } from '../../gantt-upper';
import { NgIf, NgFor, NgTemplateOutlet } from '@angular/common';
import { GanttConfigService } from '../../gantt.config';
import * as i0 from "@angular/core";
import * as i1 from "../../gantt-upper";
export class NgxGanttToolbarComponent {
    get top() {
        return this.ganttUpper.styles.headerHeight + 16 + 'px';
    }
    constructor(ganttUpper) {
        this.ganttUpper = ganttUpper;
        this.ganttItemClass = true;
        this.views = inject(GanttConfigService).getViewsLocale();
    }
    selectView(view) {
        this.ganttUpper.changeView(view);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: NgxGanttToolbarComponent, deps: [{ token: GANTT_UPPER_TOKEN }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.0", type: NgxGanttToolbarComponent, isStandalone: true, selector: "ngx-gantt-toolbar,gantt-toolbar", inputs: { template: "template" }, host: { properties: { "class.gantt-toolbar": "this.ganttItemClass", "style.top": "this.top" } }, ngImport: i0, template: "<div class=\"toolbar-container\">\n  <ng-container *ngIf=\"!template\">\n    <div class=\"toolbar-views\" *ngIf=\"this.ganttUpper.toolbarOptions?.viewTypes?.length\">\n      <ng-container *ngFor=\"let viewType of this.ganttUpper.toolbarOptions?.viewTypes\">\n        <div\n          class=\"toolbar-view\"\n          *ngIf=\"views[viewType]\"\n          [class.active]=\"viewType === this.ganttUpper.viewType\"\n          (click)=\"selectView(viewType)\"\n        >\n          {{ views[viewType].label }}\n        </div>\n      </ng-container>\n    </div>\n  </ng-container>\n  <ng-template [ngTemplateOutlet]=\"template\"></ng-template>\n</div>\n", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: NgxGanttToolbarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-gantt-toolbar,gantt-toolbar', standalone: true, imports: [NgIf, NgFor, NgTemplateOutlet], template: "<div class=\"toolbar-container\">\n  <ng-container *ngIf=\"!template\">\n    <div class=\"toolbar-views\" *ngIf=\"this.ganttUpper.toolbarOptions?.viewTypes?.length\">\n      <ng-container *ngFor=\"let viewType of this.ganttUpper.toolbarOptions?.viewTypes\">\n        <div\n          class=\"toolbar-view\"\n          *ngIf=\"views[viewType]\"\n          [class.active]=\"viewType === this.ganttUpper.viewType\"\n          (click)=\"selectView(viewType)\"\n        >\n          {{ views[viewType].label }}\n        </div>\n      </ng-container>\n    </div>\n  </ng-container>\n  <ng-template [ngTemplateOutlet]=\"template\"></ng-template>\n</div>\n" }]
        }], ctorParameters: () => [{ type: i1.GanttUpper, decorators: [{
                    type: Inject,
                    args: [GANTT_UPPER_TOKEN]
                }] }], propDecorators: { template: [{
                type: Input
            }], ganttItemClass: [{
                type: HostBinding,
                args: ['class.gantt-toolbar']
            }], top: [{
                type: HostBinding,
                args: ['style.top']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbGJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9nYW50dC9zcmMvY29tcG9uZW50cy90b29sYmFyL3Rvb2xiYXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvZ2FudHQvc3JjL2NvbXBvbmVudHMvdG9vbGJhci90b29sYmFyLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBZSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNGLE9BQU8sRUFBYyxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7OztBQVF4RCxNQUFNLE9BQU8sd0JBQXdCO0lBS2pDLElBQ0ksR0FBRztRQUNILE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsWUFBWSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFDM0QsQ0FBQztJQUlELFlBQWlELFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFUbkMsbUJBQWMsR0FBRyxJQUFJLENBQUM7UUFPMUQsVUFBSyxHQUFHLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBRXNCLENBQUM7SUFFM0UsVUFBVSxDQUFDLElBQW1CO1FBQzFCLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JDLENBQUM7OEdBaEJRLHdCQUF3QixrQkFZYixpQkFBaUI7a0dBWjVCLHdCQUF3Qiw4TkNackMseW9CQWlCQSw0Q0RQYyxJQUFJLDZGQUFFLEtBQUssbUhBQUUsZ0JBQWdCOzsyRkFFOUIsd0JBQXdCO2tCQU5wQyxTQUFTOytCQUNJLGlDQUFpQyxjQUUvQixJQUFJLFdBQ1AsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixDQUFDOzswQkFjM0IsTUFBTTsyQkFBQyxpQkFBaUI7eUNBWDVCLFFBQVE7c0JBQWhCLEtBQUs7Z0JBRThCLGNBQWM7c0JBQWpELFdBQVc7dUJBQUMscUJBQXFCO2dCQUc5QixHQUFHO3NCQUROLFdBQVc7dUJBQUMsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSG9zdEJpbmRpbmcsIElucHV0LCBUZW1wbGF0ZVJlZiwgSW5qZWN0LCBpbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdhbnR0Vmlld1R5cGUgfSBmcm9tICcuLi8uLi9jbGFzcyc7XG5pbXBvcnQgeyBHYW50dFVwcGVyLCBHQU5UVF9VUFBFUl9UT0tFTiB9IGZyb20gJy4uLy4uL2dhbnR0LXVwcGVyJztcbmltcG9ydCB7IE5nSWYsIE5nRm9yLCBOZ1RlbXBsYXRlT3V0bGV0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEdhbnR0Q29uZmlnU2VydmljZSB9IGZyb20gJy4uLy4uL2dhbnR0LmNvbmZpZyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbmd4LWdhbnR0LXRvb2xiYXIsZ2FudHQtdG9vbGJhcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3Rvb2xiYXIuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0YW5kYWxvbmU6IHRydWUsXG4gICAgaW1wb3J0czogW05nSWYsIE5nRm9yLCBOZ1RlbXBsYXRlT3V0bGV0XVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hHYW50dFRvb2xiYXJDb21wb25lbnQge1xuICAgIEBJbnB1dCgpIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5nYW50dC10b29sYmFyJykgZ2FudHRJdGVtQ2xhc3MgPSB0cnVlO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdzdHlsZS50b3AnKVxuICAgIGdldCB0b3AoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdhbnR0VXBwZXIuc3R5bGVzLmhlYWRlckhlaWdodCArIDE2ICsgJ3B4JztcbiAgICB9XG5cbiAgICB2aWV3cyA9IGluamVjdChHYW50dENvbmZpZ1NlcnZpY2UpLmdldFZpZXdzTG9jYWxlKCk7XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KEdBTlRUX1VQUEVSX1RPS0VOKSBwcm90ZWN0ZWQgZ2FudHRVcHBlcjogR2FudHRVcHBlcikge31cblxuICAgIHNlbGVjdFZpZXcodmlldzogR2FudHRWaWV3VHlwZSkge1xuICAgICAgICB0aGlzLmdhbnR0VXBwZXIuY2hhbmdlVmlldyh2aWV3KTtcbiAgICB9XG59XG4iLCI8ZGl2IGNsYXNzPVwidG9vbGJhci1jb250YWluZXJcIj5cbiAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiF0ZW1wbGF0ZVwiPlxuICAgIDxkaXYgY2xhc3M9XCJ0b29sYmFyLXZpZXdzXCIgKm5nSWY9XCJ0aGlzLmdhbnR0VXBwZXIudG9vbGJhck9wdGlvbnM/LnZpZXdUeXBlcz8ubGVuZ3RoXCI+XG4gICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCB2aWV3VHlwZSBvZiB0aGlzLmdhbnR0VXBwZXIudG9vbGJhck9wdGlvbnM/LnZpZXdUeXBlc1wiPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3M9XCJ0b29sYmFyLXZpZXdcIlxuICAgICAgICAgICpuZ0lmPVwidmlld3Nbdmlld1R5cGVdXCJcbiAgICAgICAgICBbY2xhc3MuYWN0aXZlXT1cInZpZXdUeXBlID09PSB0aGlzLmdhbnR0VXBwZXIudmlld1R5cGVcIlxuICAgICAgICAgIChjbGljayk9XCJzZWxlY3RWaWV3KHZpZXdUeXBlKVwiXG4gICAgICAgID5cbiAgICAgICAgICB7eyB2aWV3c1t2aWV3VHlwZV0ubGFiZWwgfX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8L2Rpdj5cbiAgPC9uZy1jb250YWluZXI+XG4gIDxuZy10ZW1wbGF0ZSBbbmdUZW1wbGF0ZU91dGxldF09XCJ0ZW1wbGF0ZVwiPjwvbmctdGVtcGxhdGU+XG48L2Rpdj5cbiJdfQ==