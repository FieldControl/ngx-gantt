import { auditTime, filter, startWith, Subject, takeUntil } from 'rxjs';
import { Component, HostBinding, Input, Inject, Output, EventEmitter, ViewChildren } from '@angular/core';
import { coerceCssPixelValue } from '@angular/cdk/coercion';
import { GANTT_ABSTRACT_TOKEN } from '../../../gantt-abstract';
import { defaultColumnWidth } from '../header/gantt-table-header.component';
import { GANTT_UPPER_TOKEN } from '../../../gantt-upper';
import { CdkDrag, CdkDropList, CdkDragHandle } from '@angular/cdk/drag-drop';
import { DOCUMENT, NgIf, NgTemplateOutlet, NgFor, NgClass } from '@angular/common';
import { IsGanttRangeItemPipe } from '../../../gantt.pipe';
import { GanttIconComponent } from '../../icon/icon.component';
import * as i0 from "@angular/core";
import * as i1 from "../../../gantt-upper";
export class GanttTableBodyComponent {
    set viewportItems(data) {
        const firstData = data[0];
        if (firstData && firstData.hasOwnProperty('items')) {
            this.hasGroup = true;
        }
        this.ganttTableEmptyClass = data?.length ? false : true;
        this._viewportItems = data;
    }
    get viewportItems() {
        return this._viewportItems;
    }
    constructor(gantt, ganttUpper, cdr, document) {
        this.gantt = gantt;
        this.ganttUpper = ganttUpper;
        this.cdr = cdr;
        this.document = document;
        this.draggable = false;
        this.dragDropped = new EventEmitter();
        this.dragStarted = new EventEmitter();
        this.dragEnded = new EventEmitter();
        this.itemClick = new EventEmitter();
        this.ganttTableClass = true;
        this.ganttTableEmptyClass = false;
        this.ganttTableDragging = false;
        this.hasExpandIcon = false;
        // 缓存 Element 和 DragRef 的关系，方便在 Item 拖动时查找
        this.itemDragsMap = new Map();
        this.itemDragMoved = new Subject();
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        this.columns.changes.pipe(startWith(this.columns), takeUntil(this.destroy$)).subscribe(() => {
            this.hasExpandIcon = false;
            this.columns.forEach((column) => {
                if (!column.columnWidth) {
                    column.columnWidth = coerceCssPixelValue(defaultColumnWidth);
                }
                if (column.showExpandIcon) {
                    this.hasExpandIcon = true;
                }
            });
            this.cdr.detectChanges();
        });
    }
    ngAfterViewInit() {
        this.cdkDrags.changes
            .pipe(startWith(this.cdkDrags), takeUntil(this.destroy$))
            .subscribe((drags) => {
            this.itemDragsMap.clear();
            drags.forEach((drag) => {
                if (drag.data) {
                    // cdkDrag 变化时，缓存 Element 与 DragRef 的关系，方便 Drag Move 时查找
                    this.itemDragsMap.set(drag.element.nativeElement, drag);
                }
            });
        });
        this.itemDragMoved
            .pipe(auditTime(30), 
        //  auditTime 可能会导致拖动结束后仍然执行 moved ，所以通过判断 dragging 状态来过滤无效 moved
        filter((event) => event.source._dragRef.isDragging()), takeUntil(this.destroy$))
            .subscribe((event) => {
            this.onItemDragMoved(event);
        });
    }
    expandGroup(group) {
        this.gantt.expandGroup(group);
    }
    expandChildren(event, item) {
        event.stopPropagation();
        this.gantt.expandChildren(item);
    }
    onItemDragStarted(event) {
        this.ganttTableDragging = true;
        // 拖动开始时隐藏所有的子项
        const children = this.getChildrenElementsByElement(event.source.element.nativeElement);
        children.forEach((element) => {
            element.classList.add('drag-item-hide');
        });
        this.dragStarted.emit({
            source: event.source.data?.origin,
            sourceParent: this.getParentByItem(event.source.data)?.origin
        });
    }
    emitItemDragMoved(event) {
        this.itemDragMoved.next(event);
    }
    onItemDragMoved(event) {
        // 通过鼠标位置查找对应的目标 Item 元素
        let currentPointElement = this.document.elementFromPoint(event.pointerPosition.x, event.pointerPosition.y);
        if (!currentPointElement) {
            this.cleanupDragArtifacts();
            return;
        }
        let targetElement = currentPointElement.classList.contains('gantt-table-item')
            ? currentPointElement
            : currentPointElement.closest('.gantt-table-item');
        if (!targetElement) {
            this.cleanupDragArtifacts();
            return;
        }
        // 缓存放置目标Id 并计算鼠标相对应的位置
        this.itemDropTarget = {
            id: this.itemDragsMap.get(targetElement)?.data.id,
            position: this.getTargetPosition(targetElement, event)
        };
        // 执行外部传入的 dropEnterPredicate 判断是否允许拖入目标项
        if (this.dropEnterPredicate) {
            const targetDragRef = this.itemDragsMap.get(targetElement);
            if (this.dropEnterPredicate({
                source: event.source.data.origin,
                target: targetDragRef.data.origin,
                dropPosition: this.itemDropTarget.position
            })) {
                this.showDropPositionPlaceholder(targetElement);
            }
            else {
                this.itemDropTarget = null;
                this.cleanupDragArtifacts(false);
            }
        }
        else {
            this.showDropPositionPlaceholder(targetElement);
        }
    }
    onItemDragEnded(event) {
        this.ganttTableDragging = false;
        this.dragEnded.emit({
            source: event.source.data?.origin,
            sourceParent: this.getParentByItem(event.source.data)?.origin
        });
        // dropEnterPredicate 方法返回值为 false 时，始终未执行 onListDropped，所以只能在 dragEnded 中移除 drag-item-hide
        const children = this.getChildrenElementsByElement(event.source.element.nativeElement);
        children.forEach((element) => {
            element.classList.remove('drag-item-hide');
        });
    }
    onListDropped(event) {
        if (!this.itemDropTarget) {
            return;
        }
        const sourceItem = event.item.data;
        const sourceParent = this.getParentByItem(sourceItem);
        const sourceChildren = this.getExpandChildrenByDrag(event.item);
        const targetDragRef = this.cdkDrags.find((item) => item.data?.id === this.itemDropTarget.id);
        const targetItem = targetDragRef?.data;
        const targetParent = this.getParentByItem(targetItem);
        this.removeItem(sourceItem, sourceChildren);
        switch (this.itemDropTarget.position) {
            case 'before':
            case 'after':
                this.insertItem(targetItem, sourceItem, sourceChildren, this.itemDropTarget.position);
                sourceItem.updateLevel(targetItem.level);
                break;
            case 'inside':
                this.insertChildrenItem(targetItem, sourceItem, sourceChildren);
                sourceItem.updateLevel(targetItem.level + 1);
                break;
        }
        this.dragDropped.emit({
            source: sourceItem.origin,
            sourceParent: sourceParent?.origin,
            target: targetItem.origin,
            targetParent: targetParent?.origin,
            dropPosition: this.itemDropTarget.position
        });
        this.cleanupDragArtifacts(true);
    }
    trackBy(index, item) {
        return item.id || index;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    removeItem(item, children) {
        this.viewportItems.splice(this.viewportItems.indexOf(item), 1 + children.length);
        this.flatItems.splice(this.flatItems.indexOf(item), 1 + children.length);
    }
    insertItem(target, inserted, children, position) {
        if (position === 'before') {
            this.viewportItems.splice(this.viewportItems.indexOf(target), 0, inserted, ...children);
            this.flatItems.splice(this.flatItems.indexOf(target), 0, inserted, ...children);
        }
        else {
            const dragRef = this.cdkDrags.find((drag) => drag.data === target);
            // 如果目标项是展开的，插入的 index 位置需要考虑子项的数量
            let childrenCount = 0;
            if (target.expanded) {
                childrenCount = this.getChildrenElementsByElement(dragRef.element.nativeElement)?.length || 0;
            }
            this.viewportItems.splice(this.viewportItems.indexOf(target) + 1 + childrenCount, 0, inserted, ...children);
            this.flatItems.splice(this.flatItems.indexOf(target) + 1 + childrenCount, 0, inserted, ...children);
        }
    }
    insertChildrenItem(target, inserted, children) {
        if (target.expanded) {
            this.viewportItems.splice(this.viewportItems.indexOf(target) + target.children.length + 1, 0, inserted, ...children);
            this.flatItems.splice(this.flatItems.indexOf(target) + target.children.length + 1, 0, inserted, ...children);
        }
        target.children.push(inserted);
    }
    getParentByItem(item) {
        return (this.flatItems || []).find((n) => {
            return n.children?.includes(item);
        });
    }
    getExpandChildrenByDrag(dragRef) {
        if (!dragRef.data.expanded) {
            return [];
        }
        else {
            const childrenElements = this.getChildrenElementsByElement(dragRef.element.nativeElement);
            return childrenElements.map((element) => this.itemDragsMap.get(element).data);
        }
    }
    getChildrenElementsByElement(dragElement) {
        // 通过循环持续查找 next element，如果 element 的 level 小于当前 item 的 level，则为它的 children
        const children = [];
        const dragRef = this.itemDragsMap.get(dragElement);
        // 如果当前的 Drag 正在拖拽，会创建 PlaceholderElement 占位，所以以 PlaceholderElement 向下查找
        let nextElement = (dragRef.getPlaceholderElement() || dragElement).nextElementSibling;
        let nextDragRef = this.itemDragsMap.get(nextElement);
        while (nextDragRef && nextDragRef.data.level > dragRef.data.level) {
            children.push(nextElement);
            nextElement = nextElement.nextElementSibling;
            nextDragRef = this.itemDragsMap.get(nextElement);
        }
        return children;
    }
    getTargetPosition(target, event) {
        const targetRect = target.getBoundingClientRect();
        const beforeOrAfterGap = targetRect.height * 0.3;
        // 将 Item 高度分为上中下三段，其中上下的 Gap 为 height 的 30%，通过判断鼠标位置在哪一段 gap 来计算对应的位置
        if (event.pointerPosition.y - targetRect.top < beforeOrAfterGap) {
            return 'before';
        }
        else if (event.pointerPosition.y >= targetRect.bottom - beforeOrAfterGap) {
            return 'after';
        }
        else {
            return 'inside';
        }
    }
    showDropPositionPlaceholder(targetElement) {
        this.cleanupDragArtifacts();
        if (this.itemDropTarget && targetElement) {
            targetElement.classList.add(`drop-position-${this.itemDropTarget.position}`);
        }
    }
    cleanupDragArtifacts(dropped = false) {
        if (dropped) {
            this.itemDropTarget = null;
            this.document.querySelectorAll('.drag-item-hide').forEach((element) => element.classList.remove('drag-item-hide'));
        }
        this.document.querySelectorAll('.drop-position-before').forEach((element) => element.classList.remove('drop-position-before'));
        this.document.querySelectorAll('.drop-position-after').forEach((element) => element.classList.remove('drop-position-after'));
        this.document.querySelectorAll('.drop-position-inside').forEach((element) => element.classList.remove('drop-position-inside'));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: GanttTableBodyComponent, deps: [{ token: GANTT_ABSTRACT_TOKEN }, { token: GANTT_UPPER_TOKEN }, { token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.0", type: GanttTableBodyComponent, isStandalone: true, selector: "gantt-table-body", inputs: { viewportItems: "viewportItems", flatItems: "flatItems", columns: "columns", groupTemplate: "groupTemplate", emptyTemplate: "emptyTemplate", rowBeforeTemplate: "rowBeforeTemplate", rowAfterTemplate: "rowAfterTemplate", draggable: "draggable", dropEnterPredicate: "dropEnterPredicate" }, outputs: { dragDropped: "dragDropped", dragStarted: "dragStarted", dragEnded: "dragEnded", itemClick: "itemClick" }, host: { properties: { "class.gantt-table-draggable": "this.draggable", "class.gantt-table-body": "this.ganttTableClass", "class.gantt-table-empty": "this.ganttTableEmptyClass", "class.gantt-table-dragging": "this.ganttTableDragging" } }, viewQueries: [{ propertyName: "cdkDrags", predicate: (CdkDrag), descendants: true }], ngImport: i0, template: "<div\n  class=\"gantt-table-body-container\"\n  cdkDropList\n  [cdkDropListAutoScrollStep]=\"6\"\n  [cdkDropListData]=\"viewportItems\"\n  [cdkDropListSortingDisabled]=\"true\"\n  (cdkDropListDropped)=\"onListDropped($event)\"\n>\n  <ng-container *ngIf=\"!viewportItems?.length\">\n    <ng-container *ngIf=\"!emptyTemplate\">\n      <gantt-icon class=\"empty-icon\" iconName=\"empty\"></gantt-icon>\n      <div class=\"empty-text\">\u6CA1\u6709\u6570\u636E</div>\n    </ng-container>\n    <ng-template [ngTemplateOutlet]=\"emptyTemplate\"></ng-template>\n  </ng-container>\n\n  <ng-container *ngIf=\"viewportItems && viewportItems.length > 0\">\n    <ng-container *ngFor=\"let item of viewportItems; trackBy: trackBy\">\n      <div class=\"gantt-table-group\" [style.height.px]=\"gantt.styles.lineHeight\" [ngClass]=\"item.class\" *ngIf=\"item.items\">\n        <div class=\"gantt-table-group-title\" [class.expanded]=\"item.expanded\" (click)=\"expandGroup(item)\">\n          <gantt-icon class=\"expand-icon\" [iconName]=\"item.expanded ? 'angle-down' : 'angle-right'\"></gantt-icon>\n          <ng-container *ngIf=\"groupTemplate; else default\">\n            <ng-template\n              [ngTemplateOutlet]=\"groupTemplate\"\n              [ngTemplateOutletContext]=\"{ $implicit: item.origin, group: item.origin }\"\n            ></ng-template>\n          </ng-container>\n          <ng-template #default>\n            <span class=\"group-title\">{{ item.title }}</span>\n          </ng-template>\n        </div>\n      </div>\n\n      <div\n        *ngIf=\"!item.items\"\n        (click)=\"itemClick.emit({ event: $event, current: item.origin, selectedValue: item.origin })\"\n        cdkDrag\n        [cdkDragData]=\"item\"\n        [cdkDragDisabled]=\"(draggable && item.itemDraggable === false) || !draggable\"\n        (cdkDragStarted)=\"onItemDragStarted($event)\"\n        (cdkDragEnded)=\"onItemDragEnded($event)\"\n        (cdkDragMoved)=\"emitItemDragMoved($event)\"\n        class=\"gantt-table-item\"\n        [class.gantt-table-item-with-group]=\"hasGroup\"\n        [class.gantt-table-item-first-level-group]=\"item.level === 0 && (item.type | isGanttRangeItem)\"\n        [style.height.px]=\"gantt.styles.lineHeight\"\n        [style.lineHeight.px]=\"gantt.styles.lineHeight\"\n        [class.gantt-table-item-active]=\"ganttUpper.isSelected(item.id)\"\n      >\n        <ng-template\n          [ngTemplateOutlet]=\"rowBeforeTemplate\"\n          [ngTemplateOutletContext]=\"{ $implicit: item.origin, item: item.origin }\"\n        ></ng-template>\n\n        <div [classList]=\"column.classList\" *ngFor=\"let column of columns; let first = first\" [style.width]=\"column.columnWidth\">\n          <!-- drag icon -->\n          <gantt-icon\n            *ngIf=\"first && draggable\"\n            class=\"gantt-drag-handle\"\n            iconName=\"drag\"\n            cdkDragHandle\n            [cdkDragHandleDisabled]=\"(draggable && item.itemDraggable === false) || !draggable\"\n          ></gantt-icon>\n          <!-- expand icon -->\n          <div\n            *ngIf=\"column?.showExpandIcon || (!hasExpandIcon && first)\"\n            class=\"gantt-expand-icon\"\n            [style.marginLeft.px]=\"item.level * 20\"\n          >\n            <ng-container *ngIf=\"item.level < gantt.maxLevel - 1 && ((gantt.async && item.expandable) || item.children?.length > 0)\">\n              <gantt-icon\n                *ngIf=\"!item.loading\"\n                class=\"expand-icon\"\n                [iconName]=\"item.expanded ? 'angle-down' : 'angle-right'\"\n                (click)=\"expandChildren($event, item)\"\n              >\n              </gantt-icon>\n              <gantt-icon *ngIf=\"item.loading\" [iconName]=\"'loading'\"></gantt-icon>\n            </ng-container>\n          </div>\n          <!-- column content -->\n          <div class=\"gantt-table-column-content\">\n            <ng-template\n              [ngTemplateOutlet]=\"column.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: item.origin, item: item.origin }\"\n            ></ng-template>\n          </div>\n        </div>\n        <ng-template\n          [ngTemplateOutlet]=\"rowAfterTemplate\"\n          [ngTemplateOutletContext]=\"{ $implicit: item.origin, item: item.origin }\"\n        ></ng-template>\n      </div>\n    </ng-container>\n  </ng-container>\n</div>\n", dependencies: [{ kind: "directive", type: CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "cdkDropListData", "cdkDropListOrientation", "id", "cdkDropListLockAxis", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListAutoScrollDisabled", "cdkDropListAutoScrollStep", "cdkDropListElementContainer"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: GanttIconComponent, selector: "gantt-icon", inputs: ["iconName"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragData", "cdkDragLockAxis", "cdkDragRootElement", "cdkDragBoundary", "cdkDragStartDelay", "cdkDragFreeDragPosition", "cdkDragDisabled", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragPreviewContainer", "cdkDragScale"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { kind: "directive", type: CdkDragHandle, selector: "[cdkDragHandle]", inputs: ["cdkDragHandleDisabled"] }, { kind: "pipe", type: IsGanttRangeItemPipe, name: "isGanttRangeItem" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: GanttTableBodyComponent, decorators: [{
            type: Component,
            args: [{ selector: 'gantt-table-body', standalone: true, imports: [CdkDropList, NgIf, GanttIconComponent, NgTemplateOutlet, NgFor, NgClass, CdkDrag, CdkDragHandle, IsGanttRangeItemPipe], template: "<div\n  class=\"gantt-table-body-container\"\n  cdkDropList\n  [cdkDropListAutoScrollStep]=\"6\"\n  [cdkDropListData]=\"viewportItems\"\n  [cdkDropListSortingDisabled]=\"true\"\n  (cdkDropListDropped)=\"onListDropped($event)\"\n>\n  <ng-container *ngIf=\"!viewportItems?.length\">\n    <ng-container *ngIf=\"!emptyTemplate\">\n      <gantt-icon class=\"empty-icon\" iconName=\"empty\"></gantt-icon>\n      <div class=\"empty-text\">\u6CA1\u6709\u6570\u636E</div>\n    </ng-container>\n    <ng-template [ngTemplateOutlet]=\"emptyTemplate\"></ng-template>\n  </ng-container>\n\n  <ng-container *ngIf=\"viewportItems && viewportItems.length > 0\">\n    <ng-container *ngFor=\"let item of viewportItems; trackBy: trackBy\">\n      <div class=\"gantt-table-group\" [style.height.px]=\"gantt.styles.lineHeight\" [ngClass]=\"item.class\" *ngIf=\"item.items\">\n        <div class=\"gantt-table-group-title\" [class.expanded]=\"item.expanded\" (click)=\"expandGroup(item)\">\n          <gantt-icon class=\"expand-icon\" [iconName]=\"item.expanded ? 'angle-down' : 'angle-right'\"></gantt-icon>\n          <ng-container *ngIf=\"groupTemplate; else default\">\n            <ng-template\n              [ngTemplateOutlet]=\"groupTemplate\"\n              [ngTemplateOutletContext]=\"{ $implicit: item.origin, group: item.origin }\"\n            ></ng-template>\n          </ng-container>\n          <ng-template #default>\n            <span class=\"group-title\">{{ item.title }}</span>\n          </ng-template>\n        </div>\n      </div>\n\n      <div\n        *ngIf=\"!item.items\"\n        (click)=\"itemClick.emit({ event: $event, current: item.origin, selectedValue: item.origin })\"\n        cdkDrag\n        [cdkDragData]=\"item\"\n        [cdkDragDisabled]=\"(draggable && item.itemDraggable === false) || !draggable\"\n        (cdkDragStarted)=\"onItemDragStarted($event)\"\n        (cdkDragEnded)=\"onItemDragEnded($event)\"\n        (cdkDragMoved)=\"emitItemDragMoved($event)\"\n        class=\"gantt-table-item\"\n        [class.gantt-table-item-with-group]=\"hasGroup\"\n        [class.gantt-table-item-first-level-group]=\"item.level === 0 && (item.type | isGanttRangeItem)\"\n        [style.height.px]=\"gantt.styles.lineHeight\"\n        [style.lineHeight.px]=\"gantt.styles.lineHeight\"\n        [class.gantt-table-item-active]=\"ganttUpper.isSelected(item.id)\"\n      >\n        <ng-template\n          [ngTemplateOutlet]=\"rowBeforeTemplate\"\n          [ngTemplateOutletContext]=\"{ $implicit: item.origin, item: item.origin }\"\n        ></ng-template>\n\n        <div [classList]=\"column.classList\" *ngFor=\"let column of columns; let first = first\" [style.width]=\"column.columnWidth\">\n          <!-- drag icon -->\n          <gantt-icon\n            *ngIf=\"first && draggable\"\n            class=\"gantt-drag-handle\"\n            iconName=\"drag\"\n            cdkDragHandle\n            [cdkDragHandleDisabled]=\"(draggable && item.itemDraggable === false) || !draggable\"\n          ></gantt-icon>\n          <!-- expand icon -->\n          <div\n            *ngIf=\"column?.showExpandIcon || (!hasExpandIcon && first)\"\n            class=\"gantt-expand-icon\"\n            [style.marginLeft.px]=\"item.level * 20\"\n          >\n            <ng-container *ngIf=\"item.level < gantt.maxLevel - 1 && ((gantt.async && item.expandable) || item.children?.length > 0)\">\n              <gantt-icon\n                *ngIf=\"!item.loading\"\n                class=\"expand-icon\"\n                [iconName]=\"item.expanded ? 'angle-down' : 'angle-right'\"\n                (click)=\"expandChildren($event, item)\"\n              >\n              </gantt-icon>\n              <gantt-icon *ngIf=\"item.loading\" [iconName]=\"'loading'\"></gantt-icon>\n            </ng-container>\n          </div>\n          <!-- column content -->\n          <div class=\"gantt-table-column-content\">\n            <ng-template\n              [ngTemplateOutlet]=\"column.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: item.origin, item: item.origin }\"\n            ></ng-template>\n          </div>\n        </div>\n        <ng-template\n          [ngTemplateOutlet]=\"rowAfterTemplate\"\n          [ngTemplateOutletContext]=\"{ $implicit: item.origin, item: item.origin }\"\n        ></ng-template>\n      </div>\n    </ng-container>\n  </ng-container>\n</div>\n" }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [GANTT_ABSTRACT_TOKEN]
                }] }, { type: i1.GanttUpper, decorators: [{
                    type: Inject,
                    args: [GANTT_UPPER_TOKEN]
                }] }, { type: i0.ChangeDetectorRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }], propDecorators: { viewportItems: [{
                type: Input
            }], flatItems: [{
                type: Input
            }], columns: [{
                type: Input
            }], groupTemplate: [{
                type: Input
            }], emptyTemplate: [{
                type: Input
            }], rowBeforeTemplate: [{
                type: Input
            }], rowAfterTemplate: [{
                type: Input
            }], draggable: [{
                type: HostBinding,
                args: ['class.gantt-table-draggable']
            }, {
                type: Input
            }], dropEnterPredicate: [{
                type: Input
            }], dragDropped: [{
                type: Output
            }], dragStarted: [{
                type: Output
            }], dragEnded: [{
                type: Output
            }], itemClick: [{
                type: Output
            }], ganttTableClass: [{
                type: HostBinding,
                args: ['class.gantt-table-body']
            }], ganttTableEmptyClass: [{
                type: HostBinding,
                args: ['class.gantt-table-empty']
            }], ganttTableDragging: [{
                type: HostBinding,
                args: ['class.gantt-table-dragging']
            }], cdkDrags: [{
                type: ViewChildren,
                args: [(CdkDrag)]
            }] } });
//# sourceMappingURL=data:application/json;base64,