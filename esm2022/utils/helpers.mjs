export function isNumber(value) {
    return typeof value === 'number';
}
export function isString(value) {
    return typeof value === 'string';
}
export function isUndefined(value) {
    return value === undefined;
}
export function hexToRgb(color, opacity = 1) {
    if (/^#/g.test(color)) {
        return `rgba(${parseInt(color.slice(1, 3), 16)},${parseInt(color.slice(3, 5), 16)},${parseInt(color.slice(5, 7), 16)},${opacity})`;
    }
    else {
        return color;
    }
}
export function uniqBy(array, key) {
    const valuesMap = {};
    const result = [];
    (array || []).forEach((value) => {
        const _key = value[key];
        if (!valuesMap[_key]) {
            valuesMap[_key] = value;
            result.push(value);
        }
    });
    return result;
}
export function flatten(array) {
    return array.reduce((pre, cur) => {
        return pre.concat(Array.isArray(cur) ? flatten(cur) : cur);
    }, []);
}
// export function recursiveItems(items: GanttItemInternal[]) {
//     const result = [];
//     (items || []).forEach((item) => {
//         result.push(item);
//         if (item.expanded && item.children) {
//             result.push(...recursiveItems(item.children));
//         }
//     });
//     return result;
// }
export function recursiveItems(items) {
    const result = [];
    (items || []).forEach((item) => {
        result.push(item);
        if (item.expanded && item.children) {
            result.push(...recursiveItems(item.children));
        }
    });
    return result;
}
export function getFlatItems(items) {
    const result = [];
    (items || []).forEach((item) => {
        result.push(item);
        if (item.children) {
            result.push(...getFlatItems(item.children));
        }
    });
    return result;
}
export function keyBy(array, key) {
    const result = {};
    array.forEach((item) => {
        const keyValue = item[key];
        result[keyValue] = item;
    });
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL2dhbnR0L3NyYy91dGlscy9oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BLE1BQU0sVUFBVSxRQUFRLENBQUMsS0FBVTtJQUMvQixPQUFPLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQztBQUNyQyxDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxLQUFVO0lBQy9CLE9BQU8sT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDO0FBQ3JDLENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLEtBQVU7SUFDbEMsT0FBTyxLQUFLLEtBQUssU0FBUyxDQUFDO0FBQy9CLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEtBQWEsRUFBRSxPQUFPLEdBQUcsQ0FBQztJQUMvQyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUNwQixPQUFPLFFBQVEsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksT0FBTyxHQUFHLENBQUM7SUFDdkksQ0FBQztTQUFNLENBQUM7UUFDSixPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxNQUFNLENBQWMsS0FBVSxFQUFFLEdBQVk7SUFDeEQsTUFBTSxTQUFTLEdBQWtCLEVBQUUsQ0FBQztJQUNwQyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDbEIsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFDNUIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQWEsQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUNuQixTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ3hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkIsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQztBQUVELE1BQU0sVUFBVSxPQUFPLENBQWMsS0FBVTtJQUMzQyxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDN0IsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0QsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ1gsQ0FBQztBQUVELCtEQUErRDtBQUMvRCx5QkFBeUI7QUFDekIsd0NBQXdDO0FBQ3hDLDZCQUE2QjtBQUM3QixnREFBZ0Q7QUFDaEQsNkRBQTZEO0FBQzdELFlBQVk7QUFDWixVQUFVO0FBQ1YscUJBQXFCO0FBQ3JCLElBQUk7QUFFSixNQUFNLFVBQVUsY0FBYyxDQUFDLEtBQTBCO0lBQ3JELE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNsQixDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUMzQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xCLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNsRCxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxLQUFrQjtJQUMzQyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDbEIsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2hELENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFFRCxNQUFNLFVBQVUsS0FBSyxDQUFJLEtBQVUsRUFBRSxHQUF1QztJQUN4RSxNQUFNLE1BQU0sR0FBeUIsRUFBRSxDQUFDO0lBQ3hDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUNuQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUIsTUFBYyxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUNyQyxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHYW50dEl0ZW0sIEdhbnR0SXRlbUludGVybmFsIH0gZnJvbSAnLi4vY2xhc3MvaXRlbSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGljdGlvbmFyeTxUID0gdW5rbm93bj4ge1xuICAgIFtrZXk6IHN0cmluZ106IFQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlcih2YWx1ZTogYW55KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZTogYW55KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZTogYW55KSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb1JnYihjb2xvcjogc3RyaW5nLCBvcGFjaXR5ID0gMSkge1xuICAgIGlmICgvXiMvZy50ZXN0KGNvbG9yKSkge1xuICAgICAgICByZXR1cm4gYHJnYmEoJHtwYXJzZUludChjb2xvci5zbGljZSgxLCAzKSwgMTYpfSwke3BhcnNlSW50KGNvbG9yLnNsaWNlKDMsIDUpLCAxNil9LCR7cGFyc2VJbnQoY29sb3Iuc2xpY2UoNSwgNyksIDE2KX0sJHtvcGFjaXR5fSlgO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjb2xvcjtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bmlxQnk8VCA9IHVua25vd24+KGFycmF5OiBUW10sIGtleToga2V5b2YgVCkge1xuICAgIGNvbnN0IHZhbHVlc01hcDogRGljdGlvbmFyeTxUPiA9IHt9O1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIChhcnJheSB8fCBbXSkuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgX2tleSA9IHZhbHVlW2tleSBhcyBzdHJpbmddO1xuICAgICAgICBpZiAoIXZhbHVlc01hcFtfa2V5XSkge1xuICAgICAgICAgICAgdmFsdWVzTWFwW19rZXldID0gdmFsdWU7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmxhdHRlbjxUID0gdW5rbm93bj4oYXJyYXk6IFRbXSkge1xuICAgIHJldHVybiBhcnJheS5yZWR1Y2UoKHByZSwgY3VyKSA9PiB7XG4gICAgICAgIHJldHVybiBwcmUuY29uY2F0KEFycmF5LmlzQXJyYXkoY3VyKSA/IGZsYXR0ZW4oY3VyKSA6IGN1cik7XG4gICAgfSwgW10pO1xufVxuXG4vLyBleHBvcnQgZnVuY3Rpb24gcmVjdXJzaXZlSXRlbXMoaXRlbXM6IEdhbnR0SXRlbUludGVybmFsW10pIHtcbi8vICAgICBjb25zdCByZXN1bHQgPSBbXTtcbi8vICAgICAoaXRlbXMgfHwgW10pLmZvckVhY2goKGl0ZW0pID0+IHtcbi8vICAgICAgICAgcmVzdWx0LnB1c2goaXRlbSk7XG4vLyAgICAgICAgIGlmIChpdGVtLmV4cGFuZGVkICYmIGl0ZW0uY2hpbGRyZW4pIHtcbi8vICAgICAgICAgICAgIHJlc3VsdC5wdXNoKC4uLnJlY3Vyc2l2ZUl0ZW1zKGl0ZW0uY2hpbGRyZW4pKTtcbi8vICAgICAgICAgfVxuLy8gICAgIH0pO1xuLy8gICAgIHJldHVybiByZXN1bHQ7XG4vLyB9XG5cbmV4cG9ydCBmdW5jdGlvbiByZWN1cnNpdmVJdGVtcyhpdGVtczogR2FudHRJdGVtSW50ZXJuYWxbXSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIChpdGVtcyB8fCBbXSkuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICByZXN1bHQucHVzaChpdGVtKTtcbiAgICAgICAgaWYgKGl0ZW0uZXhwYW5kZWQgJiYgaXRlbS5jaGlsZHJlbikge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goLi4ucmVjdXJzaXZlSXRlbXMoaXRlbS5jaGlsZHJlbikpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZsYXRJdGVtcyhpdGVtczogR2FudHRJdGVtW10pIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAoaXRlbXMgfHwgW10pLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgcmVzdWx0LnB1c2goaXRlbSk7XG4gICAgICAgIGlmIChpdGVtLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCguLi5nZXRGbGF0SXRlbXMoaXRlbS5jaGlsZHJlbikpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGtleUJ5PFQ+KGFycmF5OiBUW10sIGtleTogVCBleHRlbmRzIG9iamVjdCA/IGtleW9mIFQgOiBuZXZlcik6IHsgW2tleTogc3RyaW5nXTogVCB9IHtcbiAgICBjb25zdCByZXN1bHQ6IHsgW2tleTogc3RyaW5nXTogVCB9ID0ge307XG4gICAgYXJyYXkuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBjb25zdCBrZXlWYWx1ZSA9IGl0ZW1ba2V5XTtcbiAgICAgICAgKHJlc3VsdCBhcyBhbnkpW2tleVZhbHVlXSA9IGl0ZW07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdfQ==