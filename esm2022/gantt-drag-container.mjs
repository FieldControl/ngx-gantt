import { Injectable, EventEmitter, Inject } from '@angular/core';
import { GanttLinkType } from './class';
import { GANTT_UPPER_TOKEN } from './gantt-upper';
import * as i0 from "@angular/core";
import * as i1 from "./gantt-upper";
function getDependencyType(path, dependencyTypes) {
    if (dependencyTypes.includes(GanttLinkType.ss) && path.from.pos === InBarPosition.start && path.to.pos === InBarPosition.start) {
        return GanttLinkType.ss;
    }
    if (dependencyTypes.includes(GanttLinkType.ff) && path.from.pos === InBarPosition.finish && path.to.pos === InBarPosition.finish) {
        return GanttLinkType.ff;
    }
    if (dependencyTypes.includes(GanttLinkType.sf) && path.from.pos === InBarPosition.start && path.to.pos === InBarPosition.finish) {
        return GanttLinkType.sf;
    }
    return GanttLinkType.fs;
}
export var InBarPosition;
(function (InBarPosition) {
    InBarPosition["start"] = "start";
    InBarPosition["finish"] = "finish";
})(InBarPosition || (InBarPosition = {}));
export class GanttDragContainer {
    constructor(ganttUpper) {
        this.ganttUpper = ganttUpper;
        this.dragStarted = new EventEmitter();
        this.dragMoved = new EventEmitter();
        this.dragEnded = new EventEmitter();
        this.linkDragStarted = new EventEmitter();
        this.linkDragEntered = new EventEmitter();
        this.linkDragEnded = new EventEmitter();
        this.linkDragPath = { from: null, to: null };
    }
    emitLinkDragStarted(from) {
        this.linkDraggingId = from.item.id;
        this.linkDragPath.from = from;
        this.linkDragStarted.emit({
            source: from.item.origin,
            target: null
        });
    }
    emitLinkDragEntered(to) {
        this.linkDragPath.to = to;
        this.linkDragEntered.emit({
            source: this.linkDragPath.from.item.origin,
            target: to.item.origin
        });
    }
    emitLinkDragLeaved() {
        this.linkDragPath.to = null;
    }
    emitLinkDragEnded(to) {
        if (to) {
            this.linkDragPath.to = to;
            const dependencyType = getDependencyType(this.linkDragPath, this.ganttUpper.linkOptions?.dependencyTypes);
            this.linkDragPath.from.item.addLink({
                link: this.linkDragPath.to.item.id,
                type: dependencyType
            });
            this.linkDragEnded.emit({
                source: this.linkDragPath.from.item.origin,
                target: this.linkDragPath.to.item.origin,
                type: dependencyType
            });
        }
        this.linkDraggingId = null;
        this.linkDragPath = { from: null, to: null };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: GanttDragContainer, deps: [{ token: GANTT_UPPER_TOKEN }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: GanttDragContainer }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: GanttDragContainer, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.GanttUpper, decorators: [{
                    type: Inject,
                    args: [GANTT_UPPER_TOKEN]
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FudHQtZHJhZy1jb250YWluZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9wYWNrYWdlcy9nYW50dC9zcmMvZ2FudHQtZHJhZy1jb250YWluZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFHeEMsT0FBTyxFQUFjLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFFOUQsU0FBUyxpQkFBaUIsQ0FBQyxJQUFrQixFQUFFLGVBQWdDO0lBQzNFLElBQUksZUFBZSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssYUFBYSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDN0gsT0FBTyxhQUFhLENBQUMsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFDRCxJQUFJLGVBQWUsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLGFBQWEsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQy9ILE9BQU8sYUFBYSxDQUFDLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBQ0QsSUFBSSxlQUFlLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxhQUFhLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FB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RFEsa0JBQWtCLGtCQWlCUCxpQkFBaUI7a0hBakI1QixrQkFBa0I7OzJGQUFsQixrQkFBa0I7a0JBRDlCLFVBQVU7OzBCQWtCTSxNQUFNOzJCQUFDLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEV2ZW50RW1pdHRlciwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHYW50dExpbmtUeXBlIH0gZnJvbSAnLi9jbGFzcyc7XG5pbXBvcnQgeyBHYW50dERyYWdFdmVudCwgR2FudHRMaW5rRHJhZ0V2ZW50IH0gZnJvbSAnLi9jbGFzcy9ldmVudCc7XG5pbXBvcnQgeyBHYW50dEl0ZW1JbnRlcm5hbCB9IGZyb20gJy4vY2xhc3MvaXRlbSc7XG5pbXBvcnQgeyBHYW50dFVwcGVyLCBHQU5UVF9VUFBFUl9UT0tFTiB9IGZyb20gJy4vZ2FudHQtdXBwZXInO1xuXG5mdW5jdGlvbiBnZXREZXBlbmRlbmN5VHlwZShwYXRoOiBMaW5rRHJhZ1BhdGgsIGRlcGVuZGVuY3lUeXBlczogR2FudHRMaW5rVHlwZVtdKTogR2FudHRMaW5rVHlwZSB7XG4gICAgaWYgKGRlcGVuZGVuY3lUeXBlcy5pbmNsdWRlcyhHYW50dExpbmtUeXBlLnNzKSAmJiBwYXRoLmZyb20ucG9zID09PSBJbkJhclBvc2l0aW9uLnN0YXJ0ICYmIHBhdGgudG8ucG9zID09PSBJbkJhclBvc2l0aW9uLnN0YXJ0KSB7XG4gICAgICAgIHJldHVybiBHYW50dExpbmtUeXBlLnNzO1xuICAgIH1cbiAgICBpZiAoZGVwZW5kZW5jeVR5cGVzLmluY2x1ZGVzKEdhbnR0TGlua1R5cGUuZmYpICYmIHBhdGguZnJvbS5wb3MgPT09IEluQmFyUG9zaXRpb24uZmluaXNoICYmIHBhdGgudG8ucG9zID09PSBJbkJhclBvc2l0aW9uLmZpbmlzaCkge1xuICAgICAgICByZXR1cm4gR2FudHRMaW5rVHlwZS5mZjtcbiAgICB9XG4gICAgaWYgKGRlcGVuZGVuY3lUeXBlcy5pbmNsdWRlcyhHYW50dExpbmtUeXBlLnNmKSAmJiBwYXRoLmZyb20ucG9zID09PSBJbkJhclBvc2l0aW9uLnN0YXJ0ICYmIHBhdGgudG8ucG9zID09PSBJbkJhclBvc2l0aW9uLmZpbmlzaCkge1xuICAgICAgICByZXR1cm4gR2FudHRMaW5rVHlwZS5zZjtcbiAgICB9XG4gICAgcmV0dXJuIEdhbnR0TGlua1R5cGUuZnM7XG59XG5cbmV4cG9ydCBlbnVtIEluQmFyUG9zaXRpb24ge1xuICAgIHN0YXJ0ID0gJ3N0YXJ0JyxcbiAgICBmaW5pc2ggPSAnZmluaXNoJ1xufVxuXG5leHBvcnQgdHlwZSBMaW5rRHJhZ1Bvc2l0aW9uID0ge1xuICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICAgIGl0ZW06IEdhbnR0SXRlbUludGVybmFsO1xuICAgIHBvcz86IEluQmFyUG9zaXRpb247XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIExpbmtEcmFnUGF0aCB7XG4gICAgZnJvbT86IExpbmtEcmFnUG9zaXRpb247XG4gICAgdG8/OiBMaW5rRHJhZ1Bvc2l0aW9uO1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgR2FudHREcmFnQ29udGFpbmVyIHtcbiAgICBkcmFnU3RhcnRlZCA9IG5ldyBFdmVudEVtaXR0ZXI8R2FudHREcmFnRXZlbnQ+KCk7XG5cbiAgICBkcmFnTW92ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPEdhbnR0RHJhZ0V2ZW50PigpO1xuXG4gICAgZHJhZ0VuZGVkID0gbmV3IEV2ZW50RW1pdHRlcjxHYW50dERyYWdFdmVudD4oKTtcblxuICAgIGxpbmtEcmFnU3RhcnRlZCA9IG5ldyBFdmVudEVtaXR0ZXI8R2FudHRMaW5rRHJhZ0V2ZW50PigpO1xuXG4gICAgbGlua0RyYWdFbnRlcmVkID0gbmV3IEV2ZW50RW1pdHRlcjxHYW50dExpbmtEcmFnRXZlbnQ+KCk7XG5cbiAgICBsaW5rRHJhZ0VuZGVkID0gbmV3IEV2ZW50RW1pdHRlcjxHYW50dExpbmtEcmFnRXZlbnQ+KCk7XG5cbiAgICBsaW5rRHJhZ2dpbmdJZDogc3RyaW5nO1xuXG4gICAgbGlua0RyYWdQYXRoOiBMaW5rRHJhZ1BhdGggPSB7IGZyb206IG51bGwsIHRvOiBudWxsIH07XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KEdBTlRUX1VQUEVSX1RPS0VOKSBwdWJsaWMgZ2FudHRVcHBlcjogR2FudHRVcHBlcikge31cblxuICAgIGVtaXRMaW5rRHJhZ1N0YXJ0ZWQoZnJvbTogTGlua0RyYWdQb3NpdGlvbikge1xuICAgICAgICB0aGlzLmxpbmtEcmFnZ2luZ0lkID0gZnJvbS5pdGVtLmlkO1xuICAgICAgICB0aGlzLmxpbmtEcmFnUGF0aC5mcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy5saW5rRHJhZ1N0YXJ0ZWQuZW1pdCh7XG4gICAgICAgICAgICBzb3VyY2U6IGZyb20uaXRlbS5vcmlnaW4sXG4gICAgICAgICAgICB0YXJnZXQ6IG51bGxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZW1pdExpbmtEcmFnRW50ZXJlZCh0bzogTGlua0RyYWdQb3NpdGlvbikge1xuICAgICAgICB0aGlzLmxpbmtEcmFnUGF0aC50byA9IHRvO1xuICAgICAgICB0aGlzLmxpbmtEcmFnRW50ZXJlZC5lbWl0KHtcbiAgICAgICAgICAgIHNvdXJjZTogdGhpcy5saW5rRHJhZ1BhdGguZnJvbS5pdGVtLm9yaWdpbixcbiAgICAgICAgICAgIHRhcmdldDogdG8uaXRlbS5vcmlnaW5cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZW1pdExpbmtEcmFnTGVhdmVkKCkge1xuICAgICAgICB0aGlzLmxpbmtEcmFnUGF0aC50byA9IG51bGw7XG4gICAgfVxuXG4gICAgZW1pdExpbmtEcmFnRW5kZWQodG8/OiBMaW5rRHJhZ1Bvc2l0aW9uKSB7XG4gICAgICAgIGlmICh0bykge1xuICAgICAgICAgICAgdGhpcy5saW5rRHJhZ1BhdGgudG8gPSB0bztcbiAgICAgICAgICAgIGNvbnN0IGRlcGVuZGVuY3lUeXBlID0gZ2V0RGVwZW5kZW5jeVR5cGUodGhpcy5saW5rRHJhZ1BhdGgsIHRoaXMuZ2FudHRVcHBlci5saW5rT3B0aW9ucz8uZGVwZW5kZW5jeVR5cGVzKTtcbiAgICAgICAgICAgIHRoaXMubGlua0RyYWdQYXRoLmZyb20uaXRlbS5hZGRMaW5rKHtcbiAgICAgICAgICAgICAgICBsaW5rOiB0aGlzLmxpbmtEcmFnUGF0aC50by5pdGVtLmlkLFxuICAgICAgICAgICAgICAgIHR5cGU6IGRlcGVuZGVuY3lUeXBlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubGlua0RyYWdFbmRlZC5lbWl0KHtcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHRoaXMubGlua0RyYWdQYXRoLmZyb20uaXRlbS5vcmlnaW4sXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLmxpbmtEcmFnUGF0aC50by5pdGVtLm9yaWdpbixcbiAgICAgICAgICAgICAgICB0eXBlOiBkZXBlbmRlbmN5VHlwZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxpbmtEcmFnZ2luZ0lkID0gbnVsbDtcbiAgICAgICAgdGhpcy5saW5rRHJhZ1BhdGggPSB7IGZyb206IG51bGwsIHRvOiBudWxsIH07XG4gICAgfVxufVxuIl19